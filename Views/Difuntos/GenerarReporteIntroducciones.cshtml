@using CemSys.Models.ViewModel
@model VMResumenIntroduccion

<div class="main-content">
    <div>
        <img src="~/fotos/cems.png" alt="Imagen logo cemsys" height="100">
    </div>
    <h1>Reportes de las introducciones</h1>
    <a asp-action="IndexIntroduccion" asp-controller="Difuntos" class="btn-volver"><i class="btn"></i>Volver</a>

    @{
        var agrupados = Model.ListaTramites
        .Where(t =>
        (t.nichosDifuntos?.FechaIngreso ??
        t.fosasDifuntos?.FechaIngreso ??
        t.panteonesDifuntos?.FechaIngreso) != null)
        .Select(t =>
        {
            var fecha = t.nichosDifuntos?.FechaIngreso
            ?? t.fosasDifuntos?.FechaIngreso
            ?? t.panteonesDifuntos?.FechaIngreso;

            return new
            {
                Mes = fecha.Value.ToString("MMMM", new System.Globalization.CultureInfo("es-ES")),
                Anio = fecha.Value.Year
            };
        })
        .GroupBy(x => new { x.Anio, x.Mes })
        .OrderBy(g => g.Key.Anio).ThenBy(g => DateTime.ParseExact(g.Key.Mes, "MMMM", new System.Globalization.CultureInfo("es-ES")))
        .ToList();

        var etiquetas = agrupados.Select(g => $"{g.Key.Mes} {g.Key.Anio}").ToList();
        var cantidades = agrupados.Select(g => g.Count()).ToList();
    }

    @{
        var introduccionesPorEmpleado = Model.ListaTramites
        .Where(t =>
        (t.nichosDifuntos?.FechaIngreso ??
        t.fosasDifuntos?.FechaIngreso ??
        t.panteonesDifuntos?.FechaIngreso) != null
        )
        .Select(t =>
        t.nichosDifuntos?.UsuarioNavigation?.Nombre ??
        t.fosasDifuntos?.UsuarioNavigation?.Nombre ??
        t.panteonesDifuntos?.UsuarioNavigation?.Nombre
        )
        .Where(nombre => !string.IsNullOrEmpty(nombre))
        .GroupBy(nombre => nombre)
        .OrderBy(g => g.Key)
        .ToList();

        var labelsEmpleados = introduccionesPorEmpleado.Select(g => g.Key).ToList(); // nombres
        var valoresEmpleados = introduccionesPorEmpleado.Select(g => g.Count()).ToList(); // cantidad
    }
    @{
        string fechaDesde = (Model.fechaDesde != null) ? Model.fechaDesde?.ToString("dd-MM-yyyy") : "";
        string fechaHasta = (Model.fechaHasta != null) ? Model.fechaHasta?.ToString("dd-MM-yyyy") : "";
    }

    <!--Gráficos-->
    <!--Barra por mes-->
    <div style="max-width: 800px; margin: auto;">
        <canvas id="graficoPorMes" width="800" height="400"></canvas>
        <div style="text-align: center; margin-top: 15px;">
            <form id="formPdfBarraMes" method="post" asp-action="ReporteGraficosPDF">
                <input type="hidden" id="imagenBase64BarraMes" name="imagenBase64" />
                <input type="hidden" name="fechaDesde" value="@fechaDesde" />
                <input type="hidden" name="fechaHasta" value="@fechaHasta" />
                <button type="submit" class="btn btn-primary">Exportar PDF</button>
            </form>
        </div>
    </div>

    <!--torta por parcela-->
    <div style="max-width: 700px; margin: auto; margin-top: 40px;">
        <canvas id="graficoTortaParcela" style="margin-bottom: 40px; width: 300px; height: 300px" width="300" height="300"></canvas>
        <div style="text-align: center; margin-top: 15px;">
            <form id="formPdfTortaParcela" method="post" asp-action="ReporteGraficosPDF">
                <input type="hidden" id="imagenBase64TortaParcela" name="imagenBase64" />
                <input type="hidden" name="fechaDesde" value="@fechaDesde" />
                <input type="hidden" name="fechaHasta" value="@fechaHasta" />
                <button type="submit" class="btn btn-primary">Exportar PDF</button>
            </form>
        </div>
    </div>

    <!-- barra por parcela-->
    <div style="max-width: 700px; margin: auto; margin-top: 40px;">
        <canvas id="graficoBarraParcela" width="800" height="400"></canvas>
        <div style="text-align: center; margin-top: 15px;">
            <form id="formPdfBarraParcela" method="post" asp-action="ReporteGraficosPDF">
                <input type="hidden" id="imagenBase64BarraParcela" name="imagenBase64" />
                <input type="hidden" name="fechaDesde" value="@fechaDesde" />
                <input type="hidden" name="fechaHasta" value="@fechaHasta" />
                <button type="submit" class="btn btn-primary">Exportar PDF</button>
            </form>
        </div>
    </div>

    <!-- barra horizontales por empleado-->
    <div style="max-width: 700px; margin: auto; margin-top: 40px;">
        <canvas id="graficoEmpleados" width="800" height="400"></canvas>
        <div style="text-align: center; margin-top: 15px;">
            <form id="formPdfEmpleados" method="post" asp-action="ReporteGraficosPDF">
                <input type="hidden" id="imagenBase64Empleados" name="imagenBase64" />
                <input type="hidden" name="fechaDesde" value="@fechaDesde" />
                <input type="hidden" name="fechaHasta" value="@fechaHasta" />
                <button type="submit" class="btn btn-primary">Exportar PDF</button>
            </form>
        </div>
    </div>

</div>

@{
    var listaLimpia = Model.ListaTramites.Select(t => new
    {
        t.IdTramite,
        nichosDifuntos = t.nichosDifuntos != null ? true : false,
        fosasDifuntos = t.fosasDifuntos != null ? true : false,
        panteonesDifuntos = t.panteonesDifuntos != null ? true : false
    }).ToList();
}

<!-- CDN de Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>

<script>
    // Botones para descargar en PDF
    document.getElementById('formPdfBarraMes').addEventListener('submit', function (e) {
        var canvas = document.getElementById("graficoPorMes");
        var imagen = canvas.toDataURL("image/png");
        document.getElementById("imagenBase64BarraMes").value = imagen;
    });

    document.getElementById('formPdfTortaParcela').addEventListener('submit', function (e) {
        var canvas = document.getElementById("graficoTortaParcela");
        var imagen = canvas.toDataURL("image/png");
        document.getElementById("imagenBase64TortaParcela").value = imagen;
    });

    document.getElementById('formPdfBarraParcela').addEventListener('submit', function (e) {
        var canvas = document.getElementById("graficoBarraParcela");
        var imagen = canvas.toDataURL("image/png");
        document.getElementById("imagenBase64BarraParcela").value = imagen;
    });

    document.getElementById('formPdfEmpleados').addEventListener('submit', function (e) {
        var canvas = document.getElementById("graficoEmpleados");
        var imagen = canvas.toDataURL("image/png");
        document.getElementById("imagenBase64Empleados").value = imagen;
    });

    document.addEventListener("DOMContentLoaded", function () {
        // Código para crear gráficos (igual que antes, no lo modifiqué)

        // Gráfico barras por mes
        const ctx = document.getElementById('graficoPorMes').getContext('2d');
        const chart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: @Html.Raw(Json.Serialize(etiquetas)),
                datasets: [{
                    label: 'Cantidad de Introducciones',
                    data: @Html.Raw(Json.Serialize(cantidades)),
                    backgroundColor: 'rgba(54, 162, 235, 0.6)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: false },
                    title: {
                        display: true,
                        text: 'Cantidad de introducciones por mes',
                        font: { size: 24 }
                    }
                },
                scales: {
                    x: {
                        ticks: { font: { size: 15 } }
                    },
                    y: {
                        beginAtZero: true,
                        ticks: { stepSize: 1 }
                    }
                }
            }
        });

        // Más gráficos y configuración aquí igual que antes...

        // Procesar tipos de parcela
        const tramites = @Html.Raw(Json.Serialize(listaLimpia));
        let nichos = 0, fosas = 0, panteones = 0;
        tramites.forEach(t => {
            if (t.nichosDifuntos) nichos++;
            else if (t.fosasDifuntos) fosas++;
            else if (t.panteonesDifuntos) panteones++;
        });

        const total = nichos + fosas + panteones;

        // Gráfico torta
        const ctxTorta = document.getElementById('graficoTortaParcela').getContext('2d');
        new Chart(ctxTorta, {
            type: 'pie',
            data: {
                labels: ['Nicho', 'Fosa', 'Panteón'],
                datasets: [{
                    data: [nichos, fosas, panteones],
                    backgroundColor: [
                        'rgba(54, 162, 235, 0.7)',
                        'rgba(255, 99, 132, 0.7)',
                        'rgba(255, 206, 86, 0.7)'
                    ]
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'right', labels: { font: { size: 14 } } },
                    datalabels: { display: true, color: '#fff', font: { weight: 'bold' } }
                }
            },
            plugins: [ChartDataLabels]
        });

        // Gráfico barras por parcela
        const ctxBarraParcela = document.getElementById('graficoBarraParcela').getContext('2d');
        new Chart(ctxBarraParcela, {
            type: 'bar',
            data: {
                labels: ['Nicho', 'Fosa', 'Panteón'],
                datasets: [{
                    label: 'Cantidad',
                    data: [nichos, fosas, panteones],
                    backgroundColor: [
                        'rgba(54, 162, 235, 0.7)',
                        'rgba(255, 99, 132, 0.7)',
                        'rgba(255, 206, 86, 0.7)'
                    ]
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: false },
                    title: { display: true, text: 'Cantidad por tipo de parcela', font: { size: 18 } }
                },
                scales: {
                    y: { beginAtZero: true, ticks: { stepSize: 1 } }
                }
            }
        });

        // Gráfico barras por empleado
        const ctxEmpleados = document.getElementById('graficoEmpleados').getContext('2d');
        new Chart(ctxEmpleados, {
            type: 'bar',
            data: {
                labels: @Html.Raw(Json.Serialize(labelsEmpleados)),
                datasets: [{
                    label: 'Cantidad de Introducciones',
                    data: @Html.Raw(Json.Serialize(valoresEmpleados)),
                    backgroundColor: 'rgba(75, 192, 192, 0.7)'
                }]
            },
            options: {
                indexAxis: 'y',
                responsive: true,
                plugins: {
                    legend: { display: false },
                    title: { display: true, text: 'Cantidad por empleado', font: { size: 18 } }
                },
                scales: {
                    x: { beginAtZero: true, ticks: { stepSize: 1 } }
                }
            }
        });
    });
</script>

