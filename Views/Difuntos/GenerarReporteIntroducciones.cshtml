@using CemSys.Models.ViewModel
@model VMResumenIntroduccion
<div class="main-content">
    <div>
        <img src="~/fotos/cems.png" alt="Imagen logo cemsys" height="100">
    </div>
    <h1>Reportes de las introducciones</h1>
    <a asp-action="IndexIntroduccion" asp-controller="Difuntos" class="btn-volver"><i class="btn"></i>Volver</a>

    @{
        string nroTramite = "";
        string dni = "";
        string nombreCompleto = "";
        string fechaDefuncion = "";
        string fechaNacimiento = "";

        string actaDefuncion = "";
        string tomo = "";
        string folio = "";
        string serie = "";
        string age = "";
        string estadoDifunto = "";
        string empresa = "";
        string usuario = "";

        string seccion = "";
        string ubicacion = "";
        string fechaIngreso = "";
        string datosAdicionales = "";
    }

    @foreach (var tramite in Model.ListaTramites)
    {
        @* Inicializar variables *@


        nroTramite = tramite.IdTramite.ToString();
        var difunto = tramite.DifuntoRelacionado;

        if (difunto is NichosDifunto nicho)
        {
            dni = nicho.Difunto.Dni;
            nombreCompleto = $"{nicho.Difunto.Apellido.ToUpper()} {nicho.Difunto.Nombre.ToUpper()}";
            seccion = nicho.Nicho.SeccionNavigation.Nombre.ToLower();
            ubicacion = $"Nicho {nicho.Nicho.NroNicho} Fila {nicho.Nicho.NroFila}";
            fechaIngreso = nicho.FechaIngreso?.ToString("dd/MM/yyyy HH:mm");

            fechaDefuncion = nicho.Difunto.FechaDefuncion?.ToString("dd/MM/yyyy");
            fechaNacimiento = nicho.Difunto.FechaNacimiento?.ToString("dd/MM/yyyy");
            actaDefuncion = (nicho.Difunto.ActaDefuncionNavigation.NroActa != 0) ? nicho.Difunto.ActaDefuncionNavigation.NroActa.ToString() : "";
            tomo = (nicho.Difunto.ActaDefuncionNavigation.Tomo != 0) ? nicho.Difunto.ActaDefuncionNavigation.Tomo.ToString() : "";
            folio = (nicho.Difunto.ActaDefuncionNavigation.Folio != 0) ? nicho.Difunto.ActaDefuncionNavigation.Folio.ToString() : "";
            serie = (nicho.Difunto.ActaDefuncionNavigation.Serie != null) ? nicho.Difunto.ActaDefuncionNavigation.Serie.ToUpper() : "";
            age = (nicho.Difunto.ActaDefuncionNavigation.Age != 0) ? nicho.Difunto.ActaDefuncionNavigation.Age.ToString() : "";
            estadoDifunto = nicho.Difunto.EstadoNavigation.Estado;
            empresa = nicho.Empresa.ToLower();
            usuario = nicho.UsuarioNavigation.Nombre.ToLower();
            datosAdicionales = nicho.Difunto.Descripcion;


        }
        else if (difunto is FosasDifunto fosa)
        {
            dni = fosa.Difunto.Dni;
            nombreCompleto = $"{fosa.Difunto.Apellido.ToUpper()} {fosa.Difunto.Nombre.ToUpper()}";
            seccion = fosa.Fosa.SeccionNavigation.Nombre.ToLower();
            ubicacion = $"Fosa {fosa.Fosa.NroFosa}";
            fechaIngreso = fosa.FechaIngreso?.ToString("dd/MM/yyyy HH:mm");

            fechaDefuncion = fosa.Difunto.FechaDefuncion?.ToString("dd/MM/yyyy");
            fechaNacimiento = fosa.Difunto.FechaNacimiento?.ToString("dd/MM/yyyy");
            actaDefuncion = (fosa.Difunto.ActaDefuncionNavigation.NroActa != 0) ? fosa.Difunto.ActaDefuncionNavigation.NroActa.ToString() : "";
            tomo = (fosa.Difunto.ActaDefuncionNavigation.Tomo != 0) ? fosa.Difunto.ActaDefuncionNavigation.Tomo.ToString() : "";
            folio = (fosa.Difunto.ActaDefuncionNavigation.Folio != 0) ? fosa.Difunto.ActaDefuncionNavigation.Folio.ToString() : "";
            serie = (fosa.Difunto.ActaDefuncionNavigation.Serie != null) ? fosa.Difunto.ActaDefuncionNavigation.Serie.ToUpper() : "";
            age = (fosa.Difunto.ActaDefuncionNavigation.Age != 0) ? fosa.Difunto.ActaDefuncionNavigation.Age.ToString() : "";
            estadoDifunto = fosa.Difunto.EstadoNavigation.Estado;
            empresa = fosa.Empresa.ToString();
            usuario = fosa.UsuarioNavigation.Nombre.ToUpper();
            datosAdicionales = fosa.Difunto.Descripcion;

        }
        else if (difunto is PanteonDifunto panteon)
        {
            dni = panteon.Difunto.Dni;
            nombreCompleto = $"{panteon.Difunto.Apellido.ToUpper()} {panteon.Difunto.Nombre.ToUpper()}";
            seccion = panteon.Panteon.IdSeccionPanteonNavigation.Nombre.ToLower();
            ubicacion = $"Lote {panteon.Panteon.NroLote}";
            fechaIngreso = panteon.FechaIngreso?.ToString("dd/MM/yyyy HH:mm");

            fechaDefuncion = panteon.Difunto.FechaDefuncion?.ToString("dd/MM/yyyy");
            fechaNacimiento = panteon.Difunto.FechaNacimiento?.ToString("dd/MM/yyyy");
            actaDefuncion = (panteon.Difunto.ActaDefuncionNavigation.NroActa != 0) ? panteon.Difunto.ActaDefuncionNavigation.NroActa.ToString() : "";
            tomo = (panteon.Difunto.ActaDefuncionNavigation.Tomo != 0) ? panteon.Difunto.ActaDefuncionNavigation.Tomo.ToString() : "";
            folio = (panteon.Difunto.ActaDefuncionNavigation.Folio != 0) ? panteon.Difunto.ActaDefuncionNavigation.Folio.ToString() : "";
            serie = (panteon.Difunto.ActaDefuncionNavigation.Serie != null) ? panteon.Difunto.ActaDefuncionNavigation.Serie.ToUpper() : "";
            age = (panteon.Difunto.ActaDefuncionNavigation.Age != 0) ? panteon.Difunto.ActaDefuncionNavigation.Age.ToString() : "";
            estadoDifunto = panteon.Difunto.EstadoNavigation.Estado;
            empresa = panteon.Empresa.ToLower();
            usuario = panteon.UsuarioNavigation.Nombre.ToLower();
            datosAdicionales = panteon.Difunto.Descripcion;

        }
    }

    @{
        var agrupados = Model.ListaTramites
        .Where(t =>
        (t.nichosDifuntos?.FechaIngreso ??
        t.fosasDifuntos?.FechaIngreso ??
        t.panteonesDifuntos?.FechaIngreso) != null)
        .Select(t =>
        {
            var fecha = t.nichosDifuntos?.FechaIngreso
        ?? t.fosasDifuntos?.FechaIngreso
        ?? t.panteonesDifuntos?.FechaIngreso;

            return new
            {
                Mes = fecha.Value.ToString("MMMM", new System.Globalization.CultureInfo("es-ES")),
                Anio = fecha.Value.Year
            };
        })
        .GroupBy(x => new { x.Anio, x.Mes })
        .OrderBy(g => g.Key.Anio).ThenBy(g => DateTime.ParseExact(g.Key.Mes, "MMMM", new System.Globalization.CultureInfo("es-ES")))
        .ToList();

        var etiquetas = agrupados.Select(g => $"{g.Key.Mes} {g.Key.Anio}").ToList();
        var cantidades = agrupados.Select(g => g.Count()).ToList();
    }

    @{
        var introduccionesPorEmpleado = Model.ListaTramites
        .Where(t =>
        (t.nichosDifuntos?.FechaIngreso ??
        t.fosasDifuntos?.FechaIngreso ??
        t.panteonesDifuntos?.FechaIngreso) != null
        )
        .Select(t =>
        t.nichosDifuntos?.UsuarioNavigation?.Nombre ??
        t.fosasDifuntos?.UsuarioNavigation?.Nombre ??
        t.panteonesDifuntos?.UsuarioNavigation?.Nombre
        )
        .Where(nombre => !string.IsNullOrEmpty(nombre))
        .GroupBy(nombre => nombre)
        .OrderBy(g => g.Key)
        .ToList();

        var labelsEmpleados = introduccionesPorEmpleado.Select(g => g.Key).ToList(); // nombres
        var valoresEmpleados = introduccionesPorEmpleado.Select(g => g.Count()).ToList(); // cantidad
    }

    <!--Gráficos-->
    <!--Barra por mes-->
    <div style="max-width: 800px; margin: auto;">
        <canvas id="graficoPorMes" width="800" height="400"></canvas>
    </div>

    <!--torta y barra por parcela-->
    <div style="max-width: 700px; margin: auto; margin-top: 40px;">
        <canvas id="graficoTortaParcela" style="margin-bottom: 40px; width: 300px; height: 300px" width="300" height="300"></canvas>
        <canvas id="graficoBarraParcela" width="800" height="400"></canvas>
    </div>

    <!-- barra horizontales por empleado-->
    <div style="max-width: 700px; margin: auto; margin-top: 40px;">
        <canvas id="graficoEmpleados" width="800" height="400"></canvas>
    </div>



</div>

@{
    var listaLimpia = Model.ListaTramites.Select(t => new
    {
        t.IdTramite,
        // En vez de pasar todo el objeto, solo indicar si existe el tipo
        nichosDifuntos = t.nichosDifuntos != null ? true : false,
        fosasDifuntos = t.fosasDifuntos != null ? true : false,
        panteonesDifuntos = t.panteonesDifuntos != null ? true : false
    }).ToList();
}

<!-- CDN de Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        const ctx = document.getElementById('graficoPorMes').getContext('2d');
        const chart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: @Html.Raw(Json.Serialize(etiquetas)),
                datasets: [{
                    label: 'Cantidad de Introducciones',
                    data: @Html.Raw(Json.Serialize(cantidades)),
                    backgroundColor: 'rgba(54, 162, 235, 0.6)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    },
                    title: {
                        display: true,
                        text: 'Cantidad de introducciones por mes',
                        font: {
                            size: 24 // Aumentá o reducí según lo que necesites
                        }
                    }
                },
                scales: {
                    x: {
                        ticks: {
                            font: {
                                size: 15 // Aumenta el tamaño de las etiquetas en el eje X (Nicho, Fosa, Panteón)
                            }
                        }
                    },
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        });

        // Procesar tipos de parcela
        const tramites = @Html.Raw(Json.Serialize(listaLimpia));
        // Ahora procesar tramites...
        let nichos = 0, fosas = 0, panteones = 0;

        tramites.forEach(t => {
            if (t.nichosDifuntos) nichos++;
            else if (t.fosasDifuntos) fosas++;
            else if (t.panteonesDifuntos) panteones++;
        });

        const total = nichos + fosas + panteones;

        // === Gráfico de torta (porcentajes) ===
        const ctxTorta = document.getElementById('graficoTortaParcela').getContext('2d');
            new Chart(ctxTorta, {
        type: 'pie',
        data: {
            labels: ['Nicho', 'Fosa', 'Panteón'],
            datasets: [{
                data: [nichos, fosas, panteones],
                backgroundColor: [
                    'rgba(255, 99, 132, 0.7)',
                    'rgba(255, 206, 86, 0.7)',
                    'rgba(75, 192, 192, 0.7)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
        responsive: true,
            plugins: {
                title: {
                    display: true,
                    text: 'Porcentaje de introducciones por tipo de parcela',
                    font: { size: 24 }
                },
                datalabels: {
                    color: '#000',
                    font: {
                        weight: 'bold',
                        size: 30
                    },
                    formatter: (value, context) => {
                        const sum = context.chart._metasets[0].total || context.chart._metasets[0].data.reduce((a, b) => a + b, 0);
                        const percentage = (value * 100 / sum).toFixed(1) + '%';
                        return percentage;
                    }
                },
                legend: {
                    position: 'top',
                    labels: {
                        font: {
                            size: 18 // Aquí sí se aplica correctamente en v3+
                        }
                    }
                }
            }
        },
        plugins: [ChartDataLabels]
    });

        // === Gráfico de barras (cantidades) ===
        const ctxBarra = document.getElementById('graficoBarraParcela').getContext('2d');

        new Chart(ctxBarra, {
            type: 'bar',
            data: {
                labels: ['Nicho', 'Fosa', 'Panteón'],
                datasets: [{
                    label: 'Cantidad',
                    data: [nichos, fosas, panteones],
                    backgroundColor: [
                        'rgba(153, 102, 255, 0.7)',
                        'rgba(255, 159, 64, 0.7)',
                        'rgba(54, 162, 235, 0.7)'
                    ],
                    borderColor: [
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)',
                        'rgba(54, 162, 235, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: `Cantidad de introducciones por tipo de parcela (Total: ${total})`,
                        font: { size: 24 }
                    },
                    legend: {
                        display: false
                    }
                },
                scales: {
                    x: {
                        ticks: {
                           font: {
                                size: 18 // Aumenta el tamaño de las etiquetas en el eje X (Nicho, Fosa, Panteón)
                           }
                        }
                    },
                    y: {
                         beginAtZero: true,
                           ticks: {
                             stepSize: 1,
                          font: {
                            size: 14 // Aumenta el tamaño de los números del eje Y
                          }
                       }
                    }
                }
            }
        });

        // === Gráfico de barras horizontales (empleados) ===

       const ctxEmpleados = document.getElementById('graficoEmpleados').getContext('2d');
       const labelsEmpleados = @Html.Raw(Json.Serialize(labelsEmpleados));
       const valoresEmpleados = @Html.Raw(Json.Serialize(valoresEmpleados));

        new Chart(ctxEmpleados, {
        type: 'bar',
        data: {
            labels: labelsEmpleados,
            datasets: [{
                label: 'Introducciones',
                data: valoresEmpleados,
                backgroundColor: 'rgba(54, 162, 235, 0.7)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }]
        },
        options: {
            indexAxis: 'y', // 👉 Esto hace las barras horizontales
            responsive: true,
            plugins: {
                title: {
                    display: true,
                    text: 'Cantidad de introducciones por empleado',
                    font: { size: 24 }
                },
                legend: {
                    display: false
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return ` ${context.dataset.label}: ${context.raw}`;
                        }
                    }
                }
            },
            scales: {
                x: {
                    beginAtZero: true,
                    ticks:{
                        stepSize: 1
                    },
                    title: {
                        display: true,
                        text: 'Cantidad de Introducciones',
                        font: {size: 20}
                    }
                },
                y: {
                    title: {
                        display: true,
                        text: 'Empleados',
                        font: {size: 20}
                    },
                    ticks: {
                        font: {
                            size: 16 // 👈 tamaño de fuente de los nombres de los empleados
                        }
                }
                }
            }
        }
    });

});
</script>


