@using CemSys.Models.ViewModel
@model VMResumenIntroduccion

<style>

    .main-content {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 20px;
        margin-bottom: 20px;
    }

    .grafico-seccion {
        text-align: center;
        margin-bottom: 40px;
    }

    .titulo-grafico {
        color: #0a3330;
        font-family: 'Montserrat', sans-serif;
        font-size: 30px;
        margin-bottom: 15px;
    }

    .grafico-container {
        display: inline-block; 
    }

</style>


<div class="main-content">
    <a asp-action="IndexIntroduccion" asp-controller="Difuntos" class="btn-volver">
        <i class="bi bi-box-arrow-left"></i> 
    </a>
    <h1>Reportes de las introducciones</h1>
</div>

    @{
        var agrupados = Model.ListaTramites
        .Where(t =>
        (t.nichosDifuntos?.FechaIngreso ??
        t.fosasDifuntos?.FechaIngreso ??
        t.panteonesDifuntos?.FechaIngreso) != null)
        .Select(t =>
        {
            var fecha = t.nichosDifuntos?.FechaIngreso
            ?? t.fosasDifuntos?.FechaIngreso
            ?? t.panteonesDifuntos?.FechaIngreso;

            return new
            {
                Mes = fecha.Value.ToString("MMMM", new System.Globalization.CultureInfo("es-ES")),
                Anio = fecha.Value.Year
            };
        })
        .GroupBy(x => new { x.Anio, x.Mes })
        .OrderBy(g => g.Key.Anio).ThenBy(g => DateTime.ParseExact(g.Key.Mes, "MMMM", new System.Globalization.CultureInfo("es-ES")))
        .ToList();

        var etiquetas = agrupados.Select(g => $"{g.Key.Mes} {g.Key.Anio}").ToList();
        var cantidades = agrupados.Select(g => g.Count()).ToList();
    }

    @{
        var introduccionesPorEmpleado = Model.ListaTramites
        .Where(t =>
        (t.nichosDifuntos?.FechaIngreso ??
        t.fosasDifuntos?.FechaIngreso ??
        t.panteonesDifuntos?.FechaIngreso) != null
        )
        .Select(t =>
        t.nichosDifuntos?.UsuarioNavigation?.Nombre ??
        t.fosasDifuntos?.UsuarioNavigation?.Nombre ??
        t.panteonesDifuntos?.UsuarioNavigation?.Nombre
        )
        .Where(nombre => !string.IsNullOrEmpty(nombre))
        .GroupBy(nombre => nombre)
        .OrderBy(g => g.Key)
        .ToList();

        var labelsEmpleados = introduccionesPorEmpleado.Select(g => g.Key).ToList(); // nombres
        var valoresEmpleados = introduccionesPorEmpleado.Select(g => g.Count()).ToList(); // cantidad
    }
    @{
        string fechaDesde = (Model.fechaDesde != null) ? Model.fechaDesde?.ToString("dd-MM-yyyy") : "";
        string fechaHasta = (Model.fechaHasta != null) ? Model.fechaHasta?.ToString("dd-MM-yyyy") : "";
    }

    <!-- Gráfico de barras por mes -->
    <div class="grafico-seccion">
@*         <h2 class="titulo-grafico">Cantidad de introducciones por mes</h2>
 *@        <div class="grafico-container">
            <canvas id="graficoPorMes" width="800" height="400"></canvas>
        </div>
        <form id="formPdfBarraMes" method="post" asp-action="ReporteGraficosPDF">
            <input type="hidden" id="imagenBase64BarraMes" name="imagenBase64" />
            <input type="hidden" name="fechaDesde" value="@fechaDesde" />
            <input type="hidden" name="fechaHasta" value="@fechaHasta" />
            <button type="submit" class="btn-pdf">
                <i class="bi bi-file-earmark-pdf"></i> Descargar PDF
            </button>
        </form>
    </div>

    <!-- Gráfico torta por parcela -->
    <div class="grafico-seccion">
@*         <h2 class="titulo-grafico">Distribución por tipo de parcela</h2>
 *@        <div class="grafico-container">
            <canvas id="graficoTortaParcela" width="500" height="500"></canvas>
        </div>
        <form id="formPdfTortaParcela" method="post" asp-action="ReporteGraficosPDF">
            <input type="hidden" id="imagenBase64TortaParcela" name="imagenBase64" />
            <input type="hidden" name="fechaDesde" value="@fechaDesde" />
            <input type="hidden" name="fechaHasta" value="@fechaHasta" />
            <button type="submit" class="btn-pdf">
                <i class="bi bi-file-earmark-pdf"></i> Descargar PDF
            </button>
        </form>
    </div>

    <!-- Gráfico barra por parcela -->
    <div class="grafico-seccion">
@*         <h2 class="titulo-grafico">Cantidad por tipo de parcela</h2>
 *@        <div class="grafico-container">
            <canvas id="graficoBarraParcela" width="800" height="400"></canvas>
        </div>
        <form id="formPdfBarraParcela" method="post" asp-action="ReporteGraficosPDF">
            <input type="hidden" id="imagenBase64BarraParcela" name="imagenBase64" />
            <input type="hidden" name="fechaDesde" value="@fechaDesde" />
            <input type="hidden" name="fechaHasta" value="@fechaHasta" />
            <button type="submit" class="btn-pdf">
                <i class="bi bi-file-earmark-pdf"></i> Descargar PDF
            </button>
        </form>
    </div>

    <!-- Gráfico horizontal por empleado -->
    <div class="grafico-seccion">
@*         <h2 class="titulo-grafico">Cantidad por empleado</h2>
 *@        <div class="grafico-container">
            <canvas id="graficoEmpleados" width="800" height="400"></canvas>
        </div>
        <form id="formPdfEmpleados" method="post" asp-action="ReporteGraficosPDF">
            <input type="hidden" id="imagenBase64Empleados" name="imagenBase64" />
            <input type="hidden" name="fechaDesde" value="@fechaDesde" />
            <input type="hidden" name="fechaHasta" value="@fechaHasta" />
            <button type="submit" class="btn-pdf">
                <i class="bi bi-file-earmark-pdf"></i> Descargar PDF
            </button>
        </form>
    </div>



@{
    var listaLimpia = Model.ListaTramites.Select(t => new
    {
        t.IdTramite,
        nichosDifuntos = t.nichosDifuntos != null ? true : false,
        fosasDifuntos = t.fosasDifuntos != null ? true : false,
        panteonesDifuntos = t.panteonesDifuntos != null ? true : false
    }).ToList();
}

<!-- CDN de Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>

<script>
    // Botones para descargar en PDF
    document.getElementById('formPdfBarraMes').addEventListener('submit', function (e) {
        var canvas = document.getElementById("graficoPorMes");
        var imagen = canvas.toDataURL("image/png");
        document.getElementById("imagenBase64BarraMes").value = imagen;
    });

    document.getElementById('formPdfTortaParcela').addEventListener('submit', function (e) {
        var canvas = document.getElementById("graficoTortaParcela");
        var imagen = canvas.toDataURL("image/png");
        document.getElementById("imagenBase64TortaParcela").value = imagen;
    });

    document.getElementById('formPdfBarraParcela').addEventListener('submit', function (e) {
        var canvas = document.getElementById("graficoBarraParcela");
        var imagen = canvas.toDataURL("image/png");
        document.getElementById("imagenBase64BarraParcela").value = imagen;
    });

    document.getElementById('formPdfEmpleados').addEventListener('submit', function (e) {
        var canvas = document.getElementById("graficoEmpleados");
        var imagen = canvas.toDataURL("image/png");
        document.getElementById("imagenBase64Empleados").value = imagen;
    });

    document.addEventListener("DOMContentLoaded", function () {
        // Código para crear gráficos (igual que antes, no lo modifiqué)

        // Gráfico barras por mes
        const ctx = document.getElementById('graficoPorMes').getContext('2d');
        const chart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: @Html.Raw(Json.Serialize(etiquetas)),
                datasets: [{
                    label: 'Cantidad de Introducciones',
                    data: @Html.Raw(Json.Serialize(cantidades)),
                    backgroundColor: 'rgba(54, 162, 235, 0.6)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: false },
                    title: {
                        display: true,
                        text: 'Cantidad de introducciones por mes',
                        font: { size: 24 }
                    }
                },
                scales: {
                    x: {
                        ticks: { font: { size: 15 } }
                    },
                    y: {
                        beginAtZero: true,
                        ticks: { stepSize: 1 }
                    }
                }
            }
        });

        // Procesar tipos de parcela
        const tramites = @Html.Raw(Json.Serialize(listaLimpia));
        let nichos = 0, fosas = 0, panteones = 0;
        tramites.forEach(t => {
            if (t.nichosDifuntos) nichos++;
            else if (t.fosasDifuntos) fosas++;
            else if (t.panteonesDifuntos) panteones++;
        });

        const total = nichos + fosas + panteones;

        // === Gráfico de torta (porcentajes) ===
        const ctxTorta = document.getElementById('graficoTortaParcela').getContext('2d');
            new Chart(ctxTorta, {
        type: 'pie',
        data: {
            labels: ['Nicho', 'Fosa', 'Panteón'],
            datasets: [{
                data: [nichos, fosas, panteones],
                backgroundColor: [
                    'rgba(255, 99, 132, 0.7)',
                    'rgba(255, 206, 86, 0.7)',
                    'rgba(75, 192, 192, 0.7)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
        responsive: true,
            plugins: {
                title: {
                    display: true,
                    text: 'Porcentaje de introducciones por tipo de parcela',
                    font: { size: 24 }
                },
                datalabels: {
                    color: '#000',
                    font: {
                        weight: 'bold',
                        size: 30
                    },
                    formatter: (value, context) => {
                        const sum = context.chart._metasets[0].total || context.chart._metasets[0].data.reduce((a, b) => a + b, 0);
                        const percentage = (value * 100 / sum).toFixed(2) + '%';
                        return percentage;
                    }
                },
                legend: {
                    position: 'top',
                    labels: {
                        font: {
                            size: 18 // Aquí sí se aplica correctamente en v3+
                        }
                    }
                }
            }
        },
        plugins: [ChartDataLabels]
    });


        // Gráfico barras por parcela
        const ctxBarraParcela = document.getElementById('graficoBarraParcela').getContext('2d');
        new Chart(ctxBarraParcela, {
            type: 'bar',
            data: {
                labels: ['Nicho', 'Fosa', 'Panteón'],
                datasets: [{
                    label: 'Cantidad',
                    data: [nichos, fosas, panteones],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.7)',
                        'rgba(255, 206, 86, 0.7)',
                        'rgba(75, 192, 192, 0.7)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: `Cantidad de introducciones por tipo de parcela (Total: ${total})`,
                        font: { size: 24 }
                    },
                    legend: {
                        display: false
                    }
                },
                scales: {
                    x: {
                        ticks: {
                           font: {
                                size: 18 // Aumenta el tamaño de las etiquetas en el eje X (Nicho, Fosa, Panteón)
                           }
                        }
                    },
                    y: {
                         beginAtZero: true,
                           ticks: {
                             stepSize: 1,
                          font: {
                            size: 14 // Aumenta el tamaño de los números del eje Y
                          }
                       }
                    }
                }
            }
        });

        // Gráfico barras por empleado
       const ctxEmpleados = document.getElementById('graficoEmpleados').getContext('2d');
       const labelsEmpleados = @Html.Raw(Json.Serialize(labelsEmpleados));
       const valoresEmpleados = @Html.Raw(Json.Serialize(valoresEmpleados));

        new Chart(ctxEmpleados, {
        type: 'bar',
        data: {
            labels: labelsEmpleados,
            datasets: [{
                label: 'Introducciones',
                data: valoresEmpleados,
                backgroundColor: 'rgba(54, 162, 235, 0.7)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }]
        },
        options: {
            indexAxis: 'y', // 👉 Esto hace las barras horizontales
            responsive: true,
            plugins: {
                title: {
                    display: true,
                    text: 'Cantidad de introducciones por empleado',
                    font: { size: 24 }
                },
                legend: {
                    display: false
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return ` ${context.dataset.label}: ${context.raw}`;
                        }
                    }
                }
            },
            scales: {
                x: {
                    beginAtZero: true,
                    ticks:{
                        stepSize: 1
                    },
                    title: {
                        display: true,
                        text: 'Cantidad de Introducciones',
                        font: {size: 20}
                    }
                },
                y: {
                    title: {
                        display: true,
                        text: 'Empleados',
                        font: {size: 20}
                    },
                    ticks: {
                        font: {
                            size: 16 // 👈 tamaño de fuente de los nombres de los empleados
                        }
                }
                }
            }
        }
    });
    });
</script>

